services:
  postgres:
    image: postgres:latest
    container_name: postgres-mlflow
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    restart: unless-stopped

  minio:
    image: minio/minio
    container_name: minio-mlflow
    expose:
      - "9000"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - ./minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  minio-create-bucket:
    image: minio/mc
    container_name: minio-create-bucket-mlflow
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
    entrypoint: >
      bash -c "
      mc alias set minio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD} &&
      if ! mc ls minio | grep --quiet $${MINIO_BUCKET_NAME}; then
        mc mb minio/$${MINIO_BUCKET_NAME}
      else
        echo 'bucket already exists'
      fi
      "
    restart: on-failure

  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: mlflow
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
    ports:
      - "5000:5000"
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      --artifacts-destination s3://${MINIO_BUCKET_NAME}
      --host 0.0.0.0
      --port 5000
    depends_on:
      - postgres
      - minio
      - minio-create-bucket
    labels:
      - traefik.enable=true
      - traefik.http.routers.mlflow.rule=Host(`${MLFLOW_DOMAIN}`)
      - traefik.http.routers.mlflow.entrypoints=websecure
      - traefik.http.services.mlflow.loadbalancer.server.port=5000
    restart: unless-stopped

networks:
  default:
    name: traefik_proxy
    external: true
